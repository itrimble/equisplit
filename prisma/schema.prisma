// Prisma Schema for EquiSplit
// Legal Property Division Calculator Database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication and User Management (NextAuth.js compatible)
model User {
  id               String          @id @default(cuid())
  email            String          @unique
  emailVerified    DateTime?
  name             String?
  image            String?
  role             UserRole        @default(USER)
  subscriptionStatus String?       @default("free")
  subscriptionTier SubscriptionTier @default(FREE)
  stripeCustomerId String?         @unique
  mfaEnabled       Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationships
  calculations     Calculation[]
  assets          Asset[]
  debts           Debt[]
  documents       Document[]
  auditLogs       AuditLog[]
  
  // NextAuth.js relationships
  accounts         Account[]
  sessions         Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Core Calculation Models
model Calculation {
  id                  String               @id @default(cuid())
  userId              String
  title               String?
  jurisdiction        USState
  propertyRegime      PropertyRegime
  status              CalculationStatus    @default(DRAFT)
  
  // Marriage Information (encrypted fields)
  marriageDate        DateTime
  separationDate      DateTime?
  hasPrenup          Boolean              @default(false)
  specialCircumstances String[]           @default([])
  
  // Calculation Results (encrypted)
  resultsJson         String?              // JSON blob of PropertyDivision results
  confidenceLevel     Float?
  
  // Equitable Distribution Factors (encrypted JSON)
  edFactorsJson       String?              // Serialized EquitableDistributionFactors
  
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  completedAt         DateTime?

  // Relationships
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets              Asset[]
  debts               Debt[]
  documents           Document[]
  auditLogs           AuditLog[]

  @@map("calculations")
}

model Asset {
  id                     String      @id @default(cuid())
  userId                 String
  calculationId          String?
  type                   AssetType
  description            String      // Encrypted
  currentValue           Float       // Encrypted
  acquisitionDate        DateTime?
  acquisitionValue       Float?      // Encrypted
  isSeparateProperty     Boolean     @default(false)
  ownedBy                AssetOwnership?
  isQuasiCommunityProperty Boolean    @default(false)
  supportingDocuments    String[]    @default([]) // File paths/URLs
  notes                  String?     // Encrypted
  
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  // Relationships
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  calculation            Calculation? @relation(fields: [calculationId], references: [id], onDelete: SetNull)
  auditLogs              AuditLog[]

  @@map("assets")
}

model Debt {
  id                  String         @id @default(cuid())
  userId              String
  calculationId       String?
  type                DebtType
  description         String         // Encrypted
  currentBalance      Float          // Encrypted
  originalAmount      Float?         // Encrypted
  acquisitionDate     DateTime?
  isSeparateProperty  Boolean        @default(false)
  responsibility      AssetOwnership?
  supportingDocuments String[]       @default([])
  notes               String?        // Encrypted
  
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  // Relationships
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  calculation         Calculation?   @relation(fields: [calculationId], references: [id], onDelete: SetNull)
  auditLogs           AuditLog[]

  @@map("debts")
}

// Document Management
model Document {
  id             String         @id @default(cuid())
  userId         String
  calculationId  String?
  type           DocumentType
  title          String
  filename       String
  filePath       String         // Encrypted file path
  mimeType       String
  fileSize       Int
  status         DocumentStatus @default(DRAFT)
  
  // Court document metadata
  isCourtReady   Boolean        @default(false)
  jurisdiction   USState?
  generatedAt    DateTime?
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relationships
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  calculation    Calculation?   @relation(fields: [calculationId], references: [id], onDelete: SetNull)
  auditLogs      AuditLog[]

  @@map("documents")
}

// Security and Compliance
model AuditLog {
  id             String      @id @default(cuid())
  userId         String?     // Optional for anonymous actions
  sessionId      String?     // Session identifier
  action         AuditAction
  resource       String      // Table name or resource identifier
  resourceId     String?     // ID of the affected resource
  details        String?     // JSON with action details
  detailsHash    String?     // SHA-256 hash for integrity verification
  ipAddress      String?     
  userAgent      String?     
  complianceLevel ComplianceLevel @default(STANDARD)
  timestamp      DateTime    @default(now())
  
  // Relationships (optional foreign keys for context)
  calculationId  String?
  assetId        String?
  debtId         String?
  documentId     String?
  
  createdAt      DateTime    @default(now())

  // Relationships
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  calculation    Calculation? @relation(fields: [calculationId], references: [id], onDelete: SetNull)
  asset          Asset?       @relation(fields: [assetId], references: [id], onDelete: SetNull)
  debt           Debt?        @relation(fields: [debtId], references: [id], onDelete: SetNull)
  document       Document?    @relation(fields: [documentId], references: [id], onDelete: SetNull)

  // Index for performance
  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@index([complianceLevel, timestamp])
  @@map("audit_logs")
}

// Enums
enum UserRole {
  USER
  PROFESSIONAL
  ENTERPRISE
  ADMIN

  @@map("user_role")
}

enum SubscriptionTier {
  FREE
  PROFESSIONAL
  ENTERPRISE

  @@map("subscription_tier")
}

enum USState {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
  DC

  @@map("us_state")
}

enum PropertyRegime {
  COMMUNITY
  EQUITABLE

  @@map("property_regime")
}

enum AssetType {
  REAL_ESTATE
  VEHICLE
  BANK_ACCOUNT
  INVESTMENT_ACCOUNT
  RETIREMENT_ACCOUNT
  BUSINESS_INTEREST
  PERSONAL_PROPERTY
  CRYPTOCURRENCY
  INSURANCE
  OTHER

  @@map("asset_type")
}

enum DebtType {
  MORTGAGE
  VEHICLE_LOAN
  CREDIT_CARD
  STUDENT_LOAN
  BUSINESS_DEBT
  PERSONAL_LOAN
  OTHER

  @@map("debt_type")
}

enum AssetOwnership {
  SPOUSE1
  SPOUSE2
  JOINT

  @@map("asset_ownership")
}

enum CalculationStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED

  @@map("calculation_status")
}

enum DocumentType {
  MARITAL_SETTLEMENT_AGREEMENT
  FINANCIAL_AFFIDAVIT
  PROPERTY_DEBT_SUMMARY
  SUPPORTING_DOCUMENT
  COURT_FILING
  OTHER

  @@map("document_type")
}

enum DocumentStatus {
  DRAFT
  GENERATED
  REVIEWED
  FILED
  APPROVED

  @@map("document_status")
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  CALCULATE
  DOWNLOAD
  PAYMENT
  EXPORT

  @@map("audit_action")
}

enum ComplianceLevel {
  STANDARD
  FINANCIAL
  LEGAL

  @@map("compliance_level")
}