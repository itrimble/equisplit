// Prisma Schema for EquiSplit
// Legal Property Division Calculator Database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Can be "sqlite" for development
  url      = env("DATABASE_URL")
}

// Authentication and User Management (NextAuth.js compatible)
model User {
  id               String          @id @default(cuid())
  email            String          @unique
  emailVerified    DateTime?
  name             String?
  image            String?
  hashedPassword   String?         // For credentials provider
  role             UserRole        @default(USER)
  subscriptionStatus String?       @default("free")
  subscriptionTier SubscriptionTier @default(FREE)
  stripeCustomerId String?         @unique
  mfaEnabled       Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationships
  calculations     Calculation[]
  assets          Asset[]
  debts           Debt[]
  documents       Document[]
  auditLogs       AuditLog[]
  
  // NextAuth.js relationships
  accounts         Account[]
  sessions         Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Calculation Data Models
model Calculation {
  id               String           @id @default(cuid())
  userId           String
  inputData        Json             // Encrypted calculation inputs
  results          Json             // Encrypted calculation results
  state            String           // US state where filing
  calculationType  CalculationType  @default(EQUITABLE_DISTRIBUTION)
  confidenceLevel  Float
  spouse1Share     Float
  spouse2Share     Float
  totalAssets      Float
  totalDebts       Float
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  completedAt      DateTime?
  
  // Relationships
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents        Document[]
  auditLogs        AuditLog[]

  @@map("calculations")
}

model Asset {
  id           String        @id @default(cuid())
  userId       String
  calculationId String?
  name         String
  description  String?
  value        Float
  assetType    AssetType
  isMarital    Boolean       @default(true)
  acquisitionDate DateTime?
  appraisalDate DateTime?
  metadata     Json?         // Additional asset-specific data
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  auditLogs    AuditLog[]

  @@map("assets")
}

model Debt {
  id           String        @id @default(cuid())
  userId       String
  calculationId String?
  name         String
  description  String?
  amount       Float
  debtType     DebtType
  isMarital    Boolean       @default(true)
  incurredDate DateTime?
  creditor     String?
  accountNumber String?      // Encrypted
  metadata     Json?         // Additional debt-specific data
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  auditLogs    AuditLog[]

  @@map("debts")
}

model Document {
  id              String         @id @default(cuid())
  userId          String
  calculationId   String?
  fileName        String
  fileType        DocumentType
  filePath        String         // Encrypted file storage path
  fileSize        Int
  generatedAt     DateTime       @default(now())
  metadata        Json?          // Document-specific metadata
  isTemplate      Boolean        @default(false)
  templateVersion String?
  
  // Relationships
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  calculation     Calculation?   @relation(fields: [calculationId], references: [id], onDelete: SetNull)
  auditLogs       AuditLog[]

  @@map("documents")
}

// Audit and Security Models
model AuditLog {
  id            String         @id @default(cuid())
  userId        String?
  action        AuditAction
  resourceType  String
  resourceId    String?
  details       Json           // Encrypted audit details
  ipAddress     String?        // Encrypted
  userAgent     String?        // Encrypted
  sessionId     String?
  timestamp     DateTime       @default(now())
  severity      LogSeverity    @default(INFO)
  
  // Relationships
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  calculation   Calculation?   @relation(fields: [resourceId], references: [id], onDelete: SetNull)
  asset         Asset?         @relation(fields: [resourceId], references: [id], onDelete: SetNull)
  debt          Debt?          @relation(fields: [resourceId], references: [id], onDelete: SetNull)
  document      Document?      @relation(fields: [resourceId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// Subscription and Payment Models
model Subscription {
  id                String              @id @default(cuid())
  userId            String
  stripeSubscriptionId String           @unique
  tier              SubscriptionTier
  status            SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("subscriptions")
}

// Enums
enum UserRole {
  USER
  PREMIUM
  PROFESSIONAL
  ADMIN
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum CalculationType {
  COMMUNITY_PROPERTY
  EQUITABLE_DISTRIBUTION
}

enum AssetType {
  REAL_ESTATE
  VEHICLE
  INVESTMENT_ACCOUNT
  RETIREMENT_ACCOUNT
  BANK_ACCOUNT
  PERSONAL_PROPERTY
  BUSINESS_INTEREST
  INTELLECTUAL_PROPERTY
  INHERITANCE
  GIFT
  OTHER
}

enum DebtType {
  MORTGAGE
  CREDIT_CARD
  STUDENT_LOAN
  AUTO_LOAN
  PERSONAL_LOAN
  BUSINESS_DEBT
  TAX_DEBT
  OTHER
}

enum DocumentType {
  MARITAL_SETTLEMENT_AGREEMENT
  FINANCIAL_AFFIDAVIT
  PROPERTY_INVENTORY
  DEBT_SCHEDULE
  CALCULATION_REPORT
  SUPPORTING_DOCUMENT
  OTHER
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  CALCULATE
  GENERATE_DOCUMENT
  EXPORT_DATA
  CHANGE_PASSWORD
  ENABLE_MFA
  DISABLE_MFA
}

enum LogSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}